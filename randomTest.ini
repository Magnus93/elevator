
SIGNAL void randomTest() {
  int i, random, call, pos, lastPulsePinValue;
  int reached1, reached2, reached3;
  int at_floor;
  int door_to_open; // set to 1 when event "open door" is generated
  float time_step; // minimum time between each reading of position
  time_step = 0.0025;
  pos = 0;

  //CLOSE DOORS
  PORTC |= 1 << 8;

  printf("Test Started! \n");
  while (1) {
    random = rand(0); // create a psuedo random number
    call = random % 10; // use a modulo operation to determine event to be called
    // start counting the position of elevator
    if (lastPulsePinValue < (PORTC & (1 << 9))) {
      if (TIM3_CCR1) pos += 1;
      if (TIM3_CCR2) pos -= 1;
    }
    lastPulsePinValue = PORTC & (1 << 9);
    // if we are at a floor and the motor is stopped 
    if ((PORTC & (1 << 7)) && !TIM3_CCR1 && !TIM3_CCR2) {
      if (pos >= -1 && pos <= 1 && reached1 != 1) {  // if reached floor1
        printf("arrived at floor 1 \n");
        at_floor = 1; 
        reached1 = 1; 
      }else if (pos >= 399 && pos <= 401 && reached2 != 1) { // if reached floor 2
        printf("arrived at floor 2 \n");
        at_floor = 1;
        reached2 = 1;
      } else if (pos >= 799 && pos <= 801 && reached3 != 1) { // if reached floor 3
        printf("arrived at floor 3 \n");
        at_floor = 1;
        reached3 = 1;
      }
      if(door_to_open) { // open door while at floor 
        printf("Opening Door \n");
        PORTC ^= 1 << 8;
        door_to_open = 0;
        // wait for a second with the doors open
        for (i = 0; i < 400; ++i) {
          if (lastPulsePinValue < (PORTC & (1 << 9))) {
            if (TIM3_CCR1) pos += 1;
            if (TIM3_CCR2) pos -= 1;
          } 
          lastPulsePinValue = PORTC & (1 << 9); 
          swatch(time_step);
        }
        // close the door after a second
        PORTC ^= 1 << 8;
        at_floor = 0;
      }
    } 
    switch (call) {
      case (0):
        printf("Call to Floor 1 \n");
        reached1 = 0; 
        break;
      case (1):
        printf("Call to Floor 2 \n");
        reached2 = 0; 
        break;
      case (2):
        printf("Call to Floor 3 \n");
        reached3 = 0; 
        break;
      case (3):
        printf("Call to Stop \n");
        break;
      case(4):
        printf("Call to open door at next floor \n");
        door_to_open = 1;
        at_floor = 0;
        break;
      default: 
        printf("No event generated \n");
        break;  
    }
    // set the pin value 
    if (0 <= call && call <= 3) {
      if(call == 3 && (PORTC & (1 << 7)) ){
        printf("Cannot be stopped! \n");
      } else {
        PORTC |= 1 << call;
      }  
      // wait 1s before resetting the pin value and creating the next pseudo random number
      for (i = 0; i < 400; ++i) {
        if (lastPulsePinValue < (PORTC & (1 << 9))) {
          if (TIM3_CCR1) pos += 1;
          if (TIM3_CCR2) pos -= 1;
        } 
        lastPulsePinValue = PORTC & (1 << 9);
        swatch(time_step);
      }
      PORTC &= ~(1 << call); // reset the pin value
    } else {    //maintains 1 second period before creating a possible event
        for (i = 0; i < 400; ++i) {
        if (lastPulsePinValue < (PORTC & (1 << 9))) {
          if (TIM3_CCR1) pos += 1;
          if (TIM3_CCR2) pos -= 1;
        } 
        lastPulsePinValue = PORTC & (1 << 9);
        swatch(time_step);
      }
    }
  }
}